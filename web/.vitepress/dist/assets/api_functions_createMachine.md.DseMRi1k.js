import{_ as e,c as i,o as t,ag as s}from"./chunks/framework.DPDPlp3K.js";const k=JSON.parse('{"title":"Function: createMachine()","description":"","frontmatter":{},"headers":[],"relativePath":"api/functions/createMachine.md","filePath":"api/functions/createMachine.md"}'),n={name:"api/functions/createMachine.md"};function l(h,a,r,o,c,p){return t(),i("div",null,a[0]||(a[0]=[s(`<p><a href="./../globals.html">valtio-fsm</a> / createMachine</p><h1 id="function-createmachine" tabindex="-1">Function: createMachine() <a class="header-anchor" href="#function-createmachine" aria-label="Permalink to &quot;Function: createMachine()&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createMachine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">   initialState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">   stateConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">   initialContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ChainableStateMachine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span></code></pre></div><p>Defined in: <a href="https://github.com/valtiojs/valtio-fsm/blob/e130d8462b1e3f3b9ad04f79c2f25bb6904906cd/src/createMachine.ts#L66" target="_blank" rel="noreferrer">createMachine.ts:66</a></p><p>Creates a state machine with chainable API backed by Valtio for reactivity</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><h3 id="tstate" tabindex="-1">TState <a class="header-anchor" href="#tstate" aria-label="Permalink to &quot;TState&quot;">​</a></h3><p><code>TState</code> <em>extends</em> <code>string</code></p><p>String literal type representing valid states</p><h3 id="tcontext" tabindex="-1">TContext <a class="header-anchor" href="#tcontext" aria-label="Permalink to &quot;TContext&quot;">​</a></h3><p><code>TContext</code> <em>extends</em> <code>Record</code>&lt;<code>string</code>, <code>unknown</code>&gt;</p><p>Context data type for the state machine</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="initialstate" tabindex="-1">initialState <a class="header-anchor" href="#initialstate" aria-label="Permalink to &quot;initialState&quot;">​</a></h3><p><code>TState</code></p><p>Starting state for the machine</p><h3 id="stateconfig" tabindex="-1">stateConfig <a class="header-anchor" href="#stateconfig" aria-label="Permalink to &quot;stateConfig&quot;">​</a></h3><p><a href="./../type-aliases/StateConfig.html"><code>StateConfig</code></a>&lt;<code>TState</code>, <code>TContext</code>&gt;</p><p>Configuration object defining states and transitions</p><h3 id="initialcontext" tabindex="-1">initialContext <a class="header-anchor" href="#initialcontext" aria-label="Permalink to &quot;initialContext&quot;">​</a></h3><p><code>TContext</code> = <code>...</code></p><p>Initial context data (defaults to empty object)</p><h3 id="options" tabindex="-1">options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;options&quot;">​</a></h3><p><a href="./../interfaces/MachineOptions.html"><code>MachineOptions</code></a>&lt;<code>TState</code>&gt; = <code>{}</code></p><p>Additional configuration options</p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><a href="./../interfaces/ChainableStateMachine.html"><code>ChainableStateMachine</code></a>&lt;<code>TState</code>, <code>TContext</code>&gt;</p><p>A chainable state machine instance with the following methods:</p><h2 id="core-api" tabindex="-1">Core API <a class="header-anchor" href="#core-api" aria-label="Permalink to &quot;Core API&quot;">​</a></h2><ul><li><a href="./../interfaces/ChainableStateMachine.html#moveto">moveTo(state, payload?)</a> - Transition to a new state</li><li><a href="./../interfaces/ChainableStateMachine.html#isin">isIn(state)</a> - Check if machine is in a specific state</li><li><a href="./../interfaces/ChainableStateMachine.html#canmoveto">canMoveTo(state)</a> - Check if transition to a specific state is allowed</li><li><a href="./../interfaces/ChainableStateMachine.html#getstore">getStore()</a> - Get the internal Valtio store for use with useSnapshot</li><li><a href="./../interfaces/ChainableStateMachine.html#resetcontext">resetContext()</a> - Reset context to initial values</li></ul><h2 id="event-system" tabindex="-1">Event System <a class="header-anchor" href="#event-system" aria-label="Permalink to &quot;Event System&quot;">​</a></h2><ul><li><a href="./../interfaces/ChainableStateMachine.html#on">on(eventName, handler)</a> - Register event handler</li><li><a href="./../interfaces/ChainableStateMachine.html#once">once(eventName, handler)</a> - Register one-time event handler</li><li><a href="./../interfaces/ChainableStateMachine.html#off">off(eventName, handler?)</a> - Remove event handler(s)</li><li><a href="./../interfaces/ChainableStateMachine.html#fire">fire(eventName, payload?)</a> - Fire an event</li></ul><h2 id="listeners-and-callbacks" tabindex="-1">Listeners and Callbacks <a class="header-anchor" href="#listeners-and-callbacks" aria-label="Permalink to &quot;Listeners and Callbacks&quot;">​</a></h2><ul><li><a href="./../interfaces/ChainableStateMachine.html#ontransition">onTransition(listener)</a> - Add a listener for state transitions</li><li><a href="./../interfaces/ChainableStateMachine.html#whenin">whenIn(state, callback)</a> - Register a callback for a specific state</li><li><a href="./../interfaces/ChainableStateMachine.html#oncontextchange">onContextChange(listener)</a> - Add a listener for context changes</li></ul><h2 id="runtime-configuration" tabindex="-1">Runtime Configuration <a class="header-anchor" href="#runtime-configuration" aria-label="Permalink to &quot;Runtime Configuration&quot;">​</a></h2><ul><li><a href="./../interfaces/ChainableStateMachine.html#settransitions">setTransitions(state, transitions)</a> - Set allowed transitions for a state</li><li><a href="./../interfaces/ChainableStateMachine.html#addtransition">addTransition(state, transition)</a> - Add a single allowed transition</li><li><a href="./../interfaces/ChainableStateMachine.html#removetransition">removeTransition(state, transition)</a> - Remove an allowed transition</li><li><a href="./../interfaces/ChainableStateMachine.html#sethandler">setHandler(state, type, handler)</a> - Set a state handler (onEnter or onExit)</li></ul><h2 id="history-management" tabindex="-1">History Management <a class="header-anchor" href="#history-management" aria-label="Permalink to &quot;History Management&quot;">​</a></h2><ul><li><a href="./../interfaces/ChainableStateMachine.html#gethistory">getHistory()</a> - Get the transition history array</li><li><a href="./../interfaces/ChainableStateMachine.html#clearhistory">clearHistory()</a> - Clear transition history</li><li><a href="./../interfaces/ChainableStateMachine.html#enablehistory">enableHistory(enable?)</a> - Enable or disable history tracking</li><li><a href="./../interfaces/ChainableStateMachine.html#sethistorysize">setHistorySize(size)</a> - Set maximum history size</li></ul><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> machine</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createMachine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;idle&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    idle: { transitions: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;loading&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    loading: { transitions: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;success&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    success: { transitions: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;idle&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    error: { transitions: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;idle&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { data: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, error: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>`,40)]))}const E=e(n,[["render",l]]);export{k as __pageData,E as default};
